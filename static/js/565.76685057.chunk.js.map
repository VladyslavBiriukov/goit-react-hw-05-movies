{"version":3,"file":"static/js/565.76685057.chunk.js","mappings":"gOAEaA,EAAb,WAKI,cAAe,eACXC,KAAKC,KAAO,EACZD,KAAKE,OAAS,KACdF,KAAKG,SAAW,EACnB,CATL,iFAWI,WAAsBC,GAAtB,8EACIJ,KAAKC,KAAOG,EADhB,SAE2BC,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,wBAEnB,CACIC,OAAQ,CACJC,QAAST,EAAcU,QACvBR,KAAMD,KAAKC,QAP3B,cAEUS,EAFV,yBAWWA,GAXX,gDAXJ,sHAyBI,WAAqBC,GAArB,gFACUC,EAAe,CACjBL,OAAQ,CACJM,SAAU,QACVZ,KAAMD,KAAKC,KACXU,MAAOX,KAAKW,MACZH,QAAST,EAAcU,UANnC,SAU2BJ,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,iBAEnBM,GAZR,cAUUF,EAVV,yBAeWA,GAfX,gDAzBJ,wHA2CI,WAAuBI,GAAvB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,KAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,WALvC,cACUC,EADV,yBASWA,GATX,2CA3CJ,mHAuDI,WAAkBI,GAAlB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,aAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,QACvBI,SAAU,WAN1B,cACUH,EADV,yBAUWA,GAVX,2CAvDJ,kHAoEI,WAAiBI,GAAjB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,aAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,QACvBI,SAAU,QACVZ,KAAMD,KAAKC,QAP3B,cACUS,EADV,yBAWWA,GAXX,gDApEJ,8DAAaX,EACFO,SAAW,+BADTP,EAEFU,QAAU,mCAFRV,EAGFgB,QAAU,iC,oKCHRC,EAAQC,EAAAA,GAAAA,GAAH,2GAOLC,EAAWD,EAAAA,GAAAA,GAAH,oHAQRE,EAAWF,EAAAA,GAAAA,GAAH,2DAIRG,EAAQH,EAAAA,GAAAA,IAAH,gJASLI,EAAQJ,EAAAA,GAAAA,IAAH,mFAMLK,EAAOL,EAAAA,GAAAA,EAAH,4D,SC5BXM,EAAgB,IAAIxB,EAAAA,EAwD1B,MAtDA,WAEI,OAAwByB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,mCAAG,+GAEeT,EAAcU,YAAYJ,GAFzC,gBAIiB,KAFjBK,EAFA,EAEAA,MAECT,KAAKU,OACVP,EAAS,kCAETF,EAAQQ,EAAKT,MACbG,EAAS,OARL,gDAWRA,EAAS,KAAMQ,SAXP,yDAAH,qDAcbJ,GACH,GAAE,CAACH,KAGA,UAACT,EAAD,YACI,SAACJ,EAAD,UAAO,UACP,SAACE,EAAD,UACKO,EAAKY,MAAM,EAAG,IAAIC,KAAI,SAAAb,GAAI,OACvB,UAACN,EAAD,WACKM,EAAKc,cACF,SAAClB,EAAD,CACImB,IAAG,UAAKzC,EAAAA,EAAAA,QAAwB0B,EAAKc,cACrCE,IAAKhB,EAAKiB,QAGd,SAACrB,EAAD,CAAOmB,IAAI,sCAAsCC,IAAI,qBAEzD,wBAAKhB,EAAKiB,QACV,SAACpB,EAAD,UAAOG,EAAKkB,UAAL,oBAA8BlB,EAAKkB,WAAc,OAV7ClB,EAAKX,GADG,MAe9Ba,IAAS,uBAAIA,MAIzB,C","sources":["components/services/api.js","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport class TheMovieDbAPI {\n    static BASE_URL = 'https://api.themoviedb.org/3';\n    static API_KEY = '6f00573c2ff703f4ade68ffc885f70a7';\n    static IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    constructor() {\n        this.page = 1;\n        this.querry = null;\n        this.per_page = 20;\n    }\n\n    async getPopularFilms(pageNumber) {\n        this.page = pageNumber;\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/trending/movie/week`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n    async fetchUniqFilms(query) {\n        const searchParams = {\n            params: {\n                language: 'en-US',\n                page: this.page,\n                query: this.query,\n                api_key: TheMovieDbAPI.API_KEY,\n            },\n        };\n\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/search/movie`,\n            searchParams\n        );\n\n        return response;\n    }\n    \n    async getMovieInfoById(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                },\n            }\n        );\n        return response;\n    }\n \n    async getCastInfo(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/credits?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                },\n            }\n        );\n        return response;\n    }\n\n    async getReviews(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/reviews?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n\n}","import styled from 'styled-components';\n\nexport const Title = styled.h2`\ndisplay: block;\nmargin-left: 50px;\nmargin-bottom: 10px;\ntext-decoration: none;\n`;\n\nexport const CastList = styled.ul`\nmargin-left: 50px;\nmargin-bottom: 10px;\n list-style: none;\n display: flex;\n gap: 15px;\n`;\n\nexport const CastItem = styled.li`\nmargin-bottom: 10px;\nwidth: 10%;\n`;\nexport const Block = styled.div`\nborder: 3px solid #2722ad;\nwidth: 95%;\nmargin: auto;\nborder-radius: 6px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Image = styled.img`\nheight: 150px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Text = styled.p`\nfont-size: 12px;\ntext-wrap: wrap;\n`;","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/services/api';\nimport { useParams } from 'react-router-dom';\nimport { Title, CastList, CastItem, Block, Image, Text } from './Cast.styled';\nimport PropTypes from 'prop-types';\n// import { Loader } from 'components/Loader/Loader';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nfunction Cast() {\n\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState('');\n    \n    const { moviesId } = useParams();\n\n    useEffect(() => {\n        const getCast = async () => {\n            try {\n                const { data } = await theMovieDbAPI.getCastInfo(moviesId);\n\n                if (data.cast.length === 0) {\n                    setError('Oooops! There is no cast info');\n                } else {\n                    setCast(data.cast);\n                    setError(null);\n                }\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n        getCast();\n    }, [moviesId]);\n\n    return (\n        <Block>\n            <Title>Cast</Title>\n            <CastList>\n                {cast.slice(0, 10).map(cast => (\n                    <CastItem key={cast.id}>\n                        {cast.profile_path ? (\n                            <Image\n                                src={`${TheMovieDbAPI.IMG_URL + cast.profile_path}`}\n                                alt={cast.name}\n                            />\n                        ) : (\n                            <Image src='https://via.placeholder.com/100x150' alt='image not found' />\n                        )}\n                        <h4>{cast.name}</h4>\n                        <Text>{cast.character ? `Character:${cast.character}` : ''}</Text>\n                    </CastItem>\n                ))}\n            </CastList>\n            {error && <p>{error}</p>}\n        </Block>\n    );\n\n}\n\nCast.propTypes = {\n    moviesId: PropTypes.number,\n};\n\nexport default Cast;"],"names":["TheMovieDbAPI","this","page","querry","per_page","pageNumber","axios","BASE_URL","params","api_key","API_KEY","response","query","searchParams","language","id","IMG_URL","Title","styled","CastList","CastItem","Block","Image","Text","theMovieDbAPI","useState","cast","setCast","error","setError","moviesId","useParams","useEffect","getCast","getCastInfo","data","length","message","slice","map","profile_path","src","alt","name","character"],"sourceRoot":""}