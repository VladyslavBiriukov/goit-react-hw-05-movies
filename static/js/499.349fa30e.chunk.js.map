{"version":3,"file":"static/js/499.349fa30e.chunk.js","mappings":"gOAEaA,EAAb,WAKI,cAAe,eACXC,KAAKC,KAAO,EACZD,KAAKE,OAAS,KACdF,KAAKG,SAAW,EACnB,CATL,iFAWI,WAAsBC,GAAtB,8EACIJ,KAAKC,KAAOG,EADhB,SAE2BC,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,wBAEnB,CACIC,OAAQ,CACJC,QAAST,EAAcU,QACvBR,KAAMD,KAAKC,QAP3B,cAEUS,EAFV,yBAWWA,GAXX,gDAXJ,sHAyBI,WAAqBC,GAArB,gFACUC,EAAe,CACjBL,OAAQ,CACJM,SAAU,QACVZ,KAAMD,KAAKC,KACXU,MAAOX,KAAKW,MACZH,QAAST,EAAcU,UANnC,SAU2BJ,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,iBAEnBM,GAZR,cAUUF,EAVV,yBAeWA,GAfX,gDAzBJ,wHA2CI,WAAuBI,GAAvB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,KAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,WALvC,cACUC,EADV,yBASWA,GATX,2CA3CJ,mHAuDI,WAAkBI,GAAlB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,aAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,QACvBI,SAAU,WAN1B,cACUH,EADV,yBAUWA,GAVX,2CAvDJ,kHAoEI,WAAiBI,GAAjB,uFAC2BT,EAAAA,EAAAA,IAAA,UAChBN,EAAcO,SADE,kBACgBQ,EADhB,aAEnB,CACIP,OAAQ,CACJC,QAAST,EAAcU,QACvBI,SAAU,QACVZ,KAAMD,KAAKC,QAP3B,cACUS,EADV,yBAWWA,GAXX,gDApEJ,8DAAaX,EACFO,SAAW,+BADTP,EAEFU,QAAU,mCAFRV,EAGFgB,QAAU,iC,kKCHRC,EAAQC,EAAAA,GAAAA,GAAH,kEAKLC,EAAcD,EAAAA,GAAAA,GAAH,sFAMXE,EAAcF,EAAAA,GAAAA,GAAH,gDAIXG,EAAQH,EAAAA,GAAAA,IAAH,gJASLI,EAAOJ,EAAAA,GAAAA,EAAH,2E,SCpBXK,EAAgB,IAAIvB,EAAAA,EAiD1B,MA/CE,WAEE,OAA8BwB,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAAU,mCAAG,+GAEQT,EAAcS,WAAWH,GAFjC,gBAIa,KAFpBI,EAFO,EAEPA,MAECC,QAAQC,OACfP,EAAS,gCAETF,EAAWO,EAAKC,SAChBN,EAAS,OARI,gDAWfA,EAAS,KAAMQ,SAXA,yDAAH,qDAchBJ,GACC,GAAE,CAACH,KAGA,UAACR,EAAD,YACI,SAACJ,EAAD,UAAO,aAEP,SAACE,EAAD,UACKM,EAAQY,KAAI,SAAAC,GAAM,OACf,UAAClB,EAAD,YACI,0BAAI,WAASkB,EAAOC,WACpB,SAACjB,EAAD,UAAOgB,EAAOE,YAFAF,EAAOvB,GADV,MAQtBY,IAAS,uBAAIA,MAGzB,C","sources":["components/services/api.js","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport class TheMovieDbAPI {\n    static BASE_URL = 'https://api.themoviedb.org/3';\n    static API_KEY = '6f00573c2ff703f4ade68ffc885f70a7';\n    static IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    constructor() {\n        this.page = 1;\n        this.querry = null;\n        this.per_page = 20;\n    }\n\n    async getPopularFilms(pageNumber) {\n        this.page = pageNumber;\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/trending/movie/week`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n    async fetchUniqFilms(query) {\n        const searchParams = {\n            params: {\n                language: 'en-US',\n                page: this.page,\n                query: this.query,\n                api_key: TheMovieDbAPI.API_KEY,\n            },\n        };\n\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/search/movie`,\n            searchParams\n        );\n\n        return response;\n    }\n    \n    async getMovieInfoById(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                },\n            }\n        );\n        return response;\n    }\n \n    async getCastInfo(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/credits?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                },\n            }\n        );\n        return response;\n    }\n\n    async getReviews(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/reviews?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n\n}","import styled from 'styled-components';\n\nexport const Title = styled.h3`\nmargin-left: 50px;\nmargin-bottom: 10px;\n`;\n\nexport const RevievsList = styled.ul`\nmargin-left: 50px;\nmargin-bottom: 10px;\n list-style: none;\n`;\n\nexport const RevievsItem = styled.li`\n\nmargin-bottom: 10px;\n`;\nexport const Block = styled.div`\nborder: 3px solid #2722ad;\nwidth: 80%;\nmargin: auto;\nborder-radius: 6px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Text = styled.p`\nmargin-left: 50px;\nmargin-top: 10px;\nwidth:90%;\n`;","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/services/api';\nimport { useParams } from 'react-router-dom';\nimport { Title, Block, Text, RevievsList, RevievsItem } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\n  function Reviews() {\n\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n    \n    const { moviesId } = useParams();\n\n    useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getReviews(moviesId);\n\n        if (data.results.length === 0) {\n          setError('Oooops! There is no reviews');\n        } else {\n          setReviews(data.results);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getReviews();\n    }, [moviesId]);\n    \n    return (\n        <Block>\n            <Title>Reviews</Title>\n\n            <RevievsList>\n                {reviews.map(review => (\n                    <RevievsItem key={review.id}>\n                        <h4>Author: {review.author}</h4>\n                        <Text>{review.content}</Text>\n                    </RevievsItem>\n                ))}\n            </RevievsList>\n\n            {error && <p>{error}</p>}\n        </Block>\n    );\n}\n\nReviews.propTypes = {\n    moviesId: PropTypes.number,\n};\n\nexport default Reviews;"],"names":["TheMovieDbAPI","this","page","querry","per_page","pageNumber","axios","BASE_URL","params","api_key","API_KEY","response","query","searchParams","language","id","IMG_URL","Title","styled","RevievsList","RevievsItem","Block","Text","theMovieDbAPI","useState","reviews","setReviews","error","setError","moviesId","useParams","useEffect","getReviews","data","results","length","message","map","review","author","content"],"sourceRoot":""}