{"version":3,"file":"static/js/611.9a9b0bcf.chunk.js","mappings":"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","sources":["components/services/api.js","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport class TheMovieDbAPI {\n    static BASE_URL = 'https://api.themoviedb.org/3';\n    static API_KEY = '6f00573c2ff703f4ade68ffc885f70a7';\n    static IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    constructor() {\n        this.page = 1;\n        this.querry = null;\n        this.per_page = 20;\n    }\n\n    async getPopularFilms(pageNumber) {\n        this.page = pageNumber;\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/trending/movie/week`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n    async fetchUniqFilms(query) {\n        const searchParams = {\n            params: {\n                language: 'en-US',\n                page: this.page,\n                query: this.query,\n                api_key: TheMovieDbAPI.API_KEY,\n            },\n        };\n\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/search/movie`,\n            searchParams\n        );\n\n        return response;\n    }\n    \n    async getMovieInfoById(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                },\n            }\n        );\n        return response;\n    }\n \n    async getCastInfo(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/credits?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                },\n            }\n        );\n        return response;\n    }\n\n    async getReviews(id) {\n        const response = await axios.get(\n            `${TheMovieDbAPI.BASE_URL}/movie/${id}/reviews?`,\n            {\n                params: {\n                    api_key: TheMovieDbAPI.API_KEY,\n                    language: 'en-US',\n                    page: this.page,\n                },\n            }\n        );\n        return response;\n    }\n\n\n}","import styled from 'styled-components';\n\nexport const Title = styled.h2`\ndisplay: block;\nmargin-left: 50px;\nmargin-bottom: 10px;\ntext-decoration: none;\n`;\n\nexport const CastList = styled.ul`\nmargin-left: 50px;\nmargin-bottom: 10px;\n list-style: none;\n display: flex;\n gap: 15px;\n`;\n\nexport const CastItem = styled.li`\nmargin-bottom: 10px;\nwidth: 10%;\n`;\nexport const Block = styled.div`\nborder: 3px solid #2722ad;\nwidth: 95%;\nmargin: auto;\nborder-radius: 6px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Image = styled.img`\nheight: 150px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Text = styled.p`\nfont-size: 12px;\ntext-wrap: wrap;\n`;","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/services/api';\nimport { useParams } from 'react-router-dom';\nimport { Title, CastList, CastItem, Block, Image, Text } from './Cast.styled';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'components/Loader/Loader';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Cast() {\n\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState('');\n    \n    const { moviesId } = useParams();\n\n    useEffect(() => {\n        const getCast = async () => {\n            try {\n                const { data } = await theMovieDbAPI.getCastInfo(moviesId);\n\n                if (data.cast.length === 0) {\n                    setError('Oooops! There is no cast info');\n                } else {\n                    setCast(data.cast);\n                    setError(null);\n                }\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n        getCast();\n    }, [moviesId]);\n\n    return (\n        <Block>\n            <Title>Cast</Title>\n            <CastList>\n                {cast.slice(0, 10).map(cast => (\n                    <CastItem key={cast.id}>\n                        {cast.profile_path ? (\n                            <Image\n                                src={`${TheMovieDbAPI.IMG_URL + cast.profile_path}`}\n                                alt={cast.name}\n                            />\n                        ) : (\n                            <Loader />\n                        )}\n                        <h4>{cast.name}</h4>\n                        <Text>Character: {cast.character}</Text>\n                    </CastItem>\n                ))}\n            </CastList>\n            {error && <p>{error}</p>}\n        </Block>\n    );\n\n}\n\nCast.propTypes = {\n    moviesId: PropTypes.number,\n};","import styled from 'styled-components';\n\nexport const Title = styled.h3`\nmargin-left: 50px;\nmargin-bottom: 10px;\n`;\n\nexport const RevievsList = styled.ul`\nmargin-left: 50px;\nmargin-bottom: 10px;\n list-style: none;\n`;\n\nexport const RevievsItem = styled.li`\n\nmargin-bottom: 10px;\n`;\nexport const Block = styled.div`\nborder: 3px solid #2722ad;\nwidth: 80%;\nmargin: auto;\nborder-radius: 6px;\nmargin-bottom: 10px;\nmargin-top: 10px;\n\n`;\nexport const Text = styled.p`\nmargin-left: 50px;\nmargin-top: 10px;\nwidth:90%;\n`;","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/services/api';\nimport { useParams } from 'react-router-dom';\nimport { Title, Block, Text, RevievsList, RevievsItem } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nexport function Reviews() {\n\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n    \n    const { moviesId } = useParams();\n\n    useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const { data } = await theMovieDbAPI.getReviews(moviesId);\n\n        if (data.results.length === 0) {\n          setError('Oooops! There is no reviews');\n        } else {\n          setReviews(data.results);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getReviews();\n    }, [moviesId]);\n    \n    return (\n        <Block>\n            <Title>Reviews</Title>\n\n            <RevievsList>\n                {reviews.map(review => (\n                    <RevievsItem key={review.id}>\n                        <h4>Author: {review.author}</h4>\n                        <Text>{review.content}</Text>\n                    </RevievsItem>\n                ))}\n            </RevievsList>\n\n            {error && <p>{error}</p>}\n        </Block>\n    );\n}\n\nReviews.propTypes = {\n    moviesId: PropTypes.number,\n};","import styled from 'styled-components';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const Block = styled.div`\ndisplay: flex;\ngap: 20px;\nmargin: 20px;\n`;\n\nexport const Image = styled.img`\nheight: 400px;\n\n`;\n\nexport const InfoBlock = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 30px;\nwidth: 500px;\n`;\n\nexport const Title = styled.h3`\nmargin-left: 50px;\n`;\nexport const LinkStyled = styled(Link)`\nmargin-left: 20px;\ndisplay: inline-block;\n  background: rgb(183,76,255);\n  background: linear-gradient(90deg, rgba(183,76,255,1) 0%, rgba(94,88,255,1) 50%, rgba(247,122,254,1) 100%);\n  color: #fff;\n  border: none;\n  padding: 0.5rem 1rem;\n  text-align: center;\n  text-decoration: none;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 0.25rem;\n  transition:  0.2s ease-in-out;\n\n  &:hover {\n    background: rgb(122,28,186);\n    background: linear-gradient(90deg, rgba(122,28,186,1) 0%, rgba(39,34,173,1) 34%, rgba(27,244,255,1) 100%);\n    box-shadow: rgba(45, 35, 66, .4) 0 4px 8px, rgba(45, 35, 66, .3) 0 7px 13px -3px, #3c4fe0 0 -3px 0 inset;\n  }\n\n  &:focus {\n    background: rgb(122,28,186);\n    background: linear-gradient(90deg, rgba(122,28,186,1) 0%, rgba(39,34,173,1) 34%, rgba(27,244,255,1) 100%);\n    box-shadow: rgba(45, 35, 66, .4) 0 4px 8px, rgba(45, 35, 66, .3) 0 7px 13px -3px, #3c4fe0 0 -3px 0 inset;\n  }\n`;\nexport const NavLinkStyled = styled(NavLink)`\ncolor: black;\ntext-decoration: none;\ndisplay: block;\nwidth: 100px;\nbackground:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n  background-position: 100% 100%, 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 400ms;\n}\n\n&:hover {\n  background-size: 0 3px, 100% 3px;\n}\n`;","import { useState, useEffect } from 'react';\nimport { TheMovieDbAPI } from 'components/services/api';\nimport { useParams, Routes, Route, useLocation } from 'react-router-dom';\nimport { Cast } from 'pages/Cast/Cast';\nimport { Reviews } from 'pages/Reviews/Reviews';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Block,\n  Image,\n  InfoBlock,\n  Title,\n  LinkStyled,\n  NavLinkStyled,\n} from './MovieDetails.styled';\nimport PropTypes from 'prop-types';\n\nconst theMovieDbAPI = new TheMovieDbAPI();\n\nfunction MovieDetails() {\n\n    const [movie, setMovie] = useState({});\n    const [error, setError] = useState('');\n\n    const { moviesId } = useParams();\n\n    const location = useLocation();\n    const goBackLink = location?.state?.from ?? '/';\n\n    useEffect(() => {\n        const getMovies = async () => {\n            try {\n                const { data } = await theMovieDbAPI.getMovieInfoById(moviesId);\n                setMovie(data);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n        getMovies();\n    }, [moviesId]);\n\n    const { poster_path, title, vote_average, genres, overview } = movie;\n\n    return (\n        <>\n            <LinkStyled to={goBackLink}>Go back</LinkStyled>\n            {movie && (\n                <Block>\n                    {poster_path ? (\n                        <Image src={`${TheMovieDbAPI.IMG_URL + poster_path}`} alt={title} />\n                    ) : (\n                        <Loader />\n                    )}\n                    <InfoBlock>\n                        <h1>{title}</h1>\n                        <p>User score: {Math.round(vote_average * 10)} %</p>\n                        <p>\n                            <b>Overview: </b>\n                            {overview}\n                        </p>\n                        {genres && (\n                            <p>\n                                <b>Genres: </b>\n                                {genres.map(genre => genre.name).join(', ')}\n                            </p>\n                        )}\n                    </InfoBlock>\n                </Block>\n            )}\n            {error && <p>Error{error}</p>}\n            <Title>Additional information</Title>\n            <ul>\n                <li>\n                    <NavLinkStyled\n                        to={`cast`}\n                        state={{ from: location?.state?.from ?? '/' }}\n                    >\n                        Cast\n                    </NavLinkStyled>\n                </li>\n                <li>\n                    <NavLinkStyled\n                        to={`reviews`}\n                        state={{ from: location?.state?.from ?? '/' }}\n                    >\n                        Reviews\n                    </NavLinkStyled>\n                </li>\n            </ul>\n\n            <Routes>\n                <Route path=\"cast\" element={<Cast />} />\n                <Route path=\"reviews\" element={<Reviews />} />\n            </Routes>\n        </>\n    );\n\n};\n\nMovieDetails.propTypes = {\n    moviesId: PropTypes.number,\n};\n\nexport default MovieDetails;"],"names":["TheMovieDbAPI","this","page","querry","per_page","pageNumber","axios","BASE_URL","params","api_key","API_KEY","response","query","searchParams","language","id","IMG_URL","Title","styled","CastList","CastItem","Block","Image","Text","theMovieDbAPI","Cast","useState","cast","setCast","error","setError","moviesId","useParams","useEffect","getCast","getCastInfo","data","length","message","slice","map","profile_path","src","alt","name","Loader","character","RevievsList","RevievsItem","Reviews","reviews","setReviews","getReviews","results","review","author","content","InfoBlock","LinkStyled","Link","NavLinkStyled","NavLink","movie","setMovie","location","useLocation","goBackLink","state","from","getMovies","getMovieInfoById","poster_path","title","vote_average","genres","overview","to","Math","round","genre","join","path","element"],"sourceRoot":""}